{"version":3,"sources":["components/Pictures.jsx","util/shuffle.js","App.jsx","index.js"],"names":["Pictures","props","react_default","a","createElement","pictures","map","imageFromJson","key","id","src","image","alt","onClick","handleClick","shuffle","array","i","copy","n","length","Math","floor","random","push","splice","App","state","jsonState","jsonFile","message","score","hasAlreadyBeenClicked","newJsonState","_this","newImage","Object","objectSpread","clicked","newScore","setState","console","log","this","className","components_Pictures","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"yNAkBeA,EAbE,SAACC,GAAD,OACbC,EAAAC,EAAAC,cAAA,UAEKH,EAAMI,SAASC,IAAI,SAACC,GACjB,OACIL,EAAAC,EAAAC,cAAA,MAAII,IAAKD,EAAcE,IACnBP,EAAAC,EAAAC,cAAA,OAAKM,IAAKH,EAAcI,MAAOC,IAAI,aAAaC,QAAS,kBAAMZ,EAAMa,YAAYP,EAAcE,YCKpGM,MAhBf,SAAiBC,GAIb,IAHA,IAAiCC,EAA7BC,EAAO,GAAIC,EAAIH,EAAMI,OAGlBD,GAGHF,EAAII,KAAKC,MAAMD,KAAKE,SAAWJ,KAG/BD,EAAKM,KAAKR,EAAMS,OAAOR,EAAG,GAAG,IAGjC,OAAOC,GCoEIQ,6MArEbC,MAAQ,CACNC,UAAWC,EACXC,QAAS,iBACTC,MAAO,KAGTjB,YAAc,SAACL,GAIb,IA2BIqB,EA3BAE,GAAwB,EAKxBC,EAAeC,EAAKP,MAAMC,UAAUtB,IAAI,SAAAK,GAI1C,IAAMwB,EAAQC,OAAAC,EAAA,EAAAD,CAAA,GAAQzB,GActB,OAXIwB,EAAS1B,KAAOA,KAGO,IAArB0B,EAASG,UACXN,GAAwB,GAI1BG,EAASG,SAAU,GAGdH,IAGLI,EAAWL,EAAKP,MAAMI,OAII,IAA1BC,GAEFO,EAAW,EAEXT,EAAU,iDAEVG,EAAeA,EAAa3B,IAAI,SAAAK,GAAK,OAAAyB,OAAAC,EAAA,EAAAD,CAAA,GAAUzB,EAAV,CAAiB2B,SAAS,QAI/DC,GAAsB,EAEtBT,EAAU,wBAGZI,EAAKM,SAAS,CAAEZ,UAAWb,EAAQkB,GAAeF,MAAOQ,EAAUT,QAASA,GAAW,kBAAMW,QAAQC,IAAIR,EAAKP,kFAI9G,OACEzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKuC,KAAKhB,MAAMG,SAChB5B,EAAAC,EAAAC,cAAA,MAAIwC,UAAU,SAAd,UAA8BD,KAAKhB,MAAMI,OACzC7B,EAAAC,EAAAC,cAACyC,EAAD,CAAUxC,SAAUsC,KAAKhB,MAAMC,UAAWd,YAAa6B,KAAK7B,sBAnElDgC,aCJlBC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.a24e1018.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * Exporting variable name on line 16 (not file name)\n */\nconst Pictures = (props) => (\n    <ul>\n        {/* Pictures pictures={...}  */}\n        {props.pictures.map((imageFromJson) => {\n            return (\n                <li key={imageFromJson.id}>\n                    <img src={imageFromJson.image} alt=\"Weimaraner\" onClick={() => props.handleClick(imageFromJson.id)} />\n                </li>\n            );\n        })}\n    </ul>\n);\n\nexport default Pictures;\n","function shuffle(array) {\n    var copy = [], n = array.length, i;\n\n    // While there remain elements to shuffle…\n    while (n) {\n\n        // Pick a remaining element…\n        i = Math.floor(Math.random() * n--);\n\n        // And move it to the new array.\n        copy.push(array.splice(i, 1)[0]);\n    }\n\n    return copy;\n}\n\nexport default shuffle;","import React, { Component } from 'react';\nimport jsonFile from './data.json';\nimport Pictures from './components/Pictures';\nimport shuffle from './util/shuffle';\n\n/**\n * This is the root component for our app.\n */\nclass App extends Component {\n  /**\n   * Initial state of our application is set to the Json file\n   */\n  state = {\n    jsonState: jsonFile,\n    message: 'Click to begin',\n    score: 0\n  }\n\n  handleClick = (id) => {\n    /**\n     * Represents whether or not an image has already been clicked on\n     */\n    let hasAlreadyBeenClicked = false;\n\n    /**\n     * new state for json array\n     */\n    let newJsonState = this.state.jsonState.map(image => {\n      /**\n       * Copy of image object\n       */\n      const newImage = { ...image };\n      \n      // Checks to see if the current image in the array is the one we clicked on\n      if (newImage.id === id) {\n        \n        // Checks to see if we've already clicked on this particular image in the past\n        if (newImage.clicked === true) {\n          hasAlreadyBeenClicked = true;\n        }\n\n        // If it is, set its \"clicked\" value to true\n        newImage.clicked = true;\n      }\n\n      return newImage;\n    });\n\n    let newScore = this.state.score;\n    let message;\n\n    // If we've previously clicked on this image, then reset the game\n    if (hasAlreadyBeenClicked === true) {\n      // Set the score back to zero\n      newScore = 0; \n      // Give the user a lovely message\n      message = 'your memory sucks, start over (click to begin)';\n      // Reset all the \"clicked\" values to `false`\n      newJsonState = newJsonState.map(image => ({ ...image, clicked: false }));\n    // Otherwise, we haven't already clicked on this message\n    } else {\n      // Increment the score by one\n      newScore = newScore + 1;\n      // Encourage the user\n      message = 'good job, keep going';\n    }\n\n    this.setState({ jsonState: shuffle(newJsonState), score: newScore, message: message }, () => console.log(this.state));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n        <h3 className='score'>Score: {this.state.score}</h3>\n        <Pictures pictures={this.state.jsonState} handleClick={this.handleClick}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}